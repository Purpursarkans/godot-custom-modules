import os


def can_build(env, platform):
    # Эта функция определяет, может ли ваш модуль быть скомпилирован
    # на данной платформе.
    # Если ваш модуль всегда должен компилироваться, просто верните True.
    # Если есть специфические требования (например, только для Linux),
    # вы можете проверить 'platform'.
    return True


def configure(env):
    # Эта функция используется для настройки окружения сборки SCons
    # для вашего модуля. Здесь вы можете добавить include-пути,
    # флаги компилятора, библиотеки и т.д.
    pass  # Для простого модуля здесь может ничего не потребоваться


def get_doc_classes():
    # Эта функция возвращает список классов, для которых генерируется документация.
    # Если у вас есть классы, которые должны появиться в документации Godot,
    # добавьте их сюда.
    return [
        "GDTest",  # Замените на имя вашего класса, если есть
    ]


def get_doc_path():
    # Эта функция возвращает путь к папке с документацией модуля.
    # Если у вас есть файлы документации (например, .xml),
    # укажите путь к ним относительно корня модуля.
    return "doc" # Или "" если у вас нет отдельной папки doc


def get_license_files():
    # Эта функция возвращает список файлов лицензий для вашего модуля.
    return [
        "COPYRIGHT.txt", # Если у вас есть файл COPYRIGHT.txt
        "LICENSE.txt",   # Если у вас есть файл LICENSE.txt
    ]


def get_source_files(env, platform):
    # ЭТА ФУНКЦИЯ ЯВЛЯЕТСЯ КЛЮЧЕВОЙ!
    # Она возвращает список всех исходных файлов (.cpp, .c) вашего модуля,
    # которые SCons должен скомпилировать.
    # Пути должны быть относительными к корневой папке вашего модуля.
    source_files = [
        "*.cpp",
        #"gdtest.cpp",  # Добавьте все ваши .cpp файлы здесь
        # "другой_файл.cpp",
    ]

    # Если у вас есть разные файлы для разных платформ, вы можете использовать:
    # if platform == "linuxbsd":
    #    source_files.append("linux_specific_file.cpp")

    return source_files


def get_gds_files(env):
    # Возвращает список всех GDScript файлов для компиляции в модуль (если применимо).
    # Для C++ модуля это обычно остается пустым или не используется.
    return []


def get_build_flags():
    # Возвращает дополнительные флаги сборки для модуля.
    return []
